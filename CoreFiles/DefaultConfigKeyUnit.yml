#This files provides the default settings for MUBES
0_APP :
    #PATH_TO_MUBES_UBEM : ../MUBES_UBEM/                #[Str] this is not currently used
    #PATH_TO_MUBES_UBEM_PYTHON : ../venv/bin/python     #[Str] this is not currently used
    PATH_TO_ENERGYPLUS : [str]           #[Str] this is for energyplus.exe path
    PATH_TO_RESULTS : [str]           #[Str] this is the main folder where the results will be stored. Subfolder are created for each studied Case
    
1_DATA :
    PATH_TO_DATA : [str]       #Input file or folder in case of several files
    EPSG_REF : [int,str]             #[int or 'None'], is 4326 for US East coast, 3950 for EU, some other for elsewhere

2_CASE:
    0_GrlChoices :
        CaseName : [str]                    #[Str] Name of the studied Case, a subfolder of this name will be created in the main folder defined in '0_APP:PATH_TO_RESULTS'
        OutputsFile : [str]     #[Str] Output file to identify the outputs the modeller would want and their frequency
        RefreshFolder : [bool]                    #[Bool] True : the folder CaseName, if exist, is emptied whatever could be in it
        MakePlotsOnly : [bool]                   #[Bool] True : a figure will be created with the buildings specified in BldID
        MakePlotsPerBld : [bool]                 #[Bool] True : a figure is created for each building including it's shadowing surfaces (if present)
        Verbose : [bool]                          #[Bool] True : Gives messages in the prompt window along the ongoing process
        CPUusage : [float,int]                          #[Float] Factor of CPU allowed to be used during parallel computing
        DebugMode : [bool]                       #[Bool] The log file will be feeded by detailed information along the process
    1_SimChoices:
        ZoneOfInterest : [str]                     #[Str] BldID can be given from an external file if generated by a third program.
        BldID : [int,str]                               #[List of Str] list of Building's ID if defined as attribute in the geojson file, index of the building in the geojson file otherwise
        DESO : [str]                               #[Str] not currently used
        VarName2Change : [str]                     #[List of Str] parameters to be changed for parametric simulations
        Bounds : [float,int]                             #[List of list of 2 floats] bounds between the parameter are to be changed [Lower Bound,Upper Bounds] a pair of value is to be given for each parameter in VarName2Change
        BoundsLim : [float,int]                          #[List of list of 2 floats] used for calibration : external strict bounds
        ParamMethods : [str]              #[List of Str] probabilistic law from which LHS will be generated (one for each parameter in VarName2Change. Can be 'Uniform', 'Normal', 'Triangular'. if 'Linear' : constant increase is ensure along the bounds
        NbRuns : [int]                              #[Int] sample size for parametric simulation
        CorePerim : [bool]                       #[Bool] True : core and perimeter zone thermal modelling
        FloorZoning : [bool]                      #[Bool] True : each floor in consider as a zone or for core zone construction
    2_AdvancedChoices :
        API : [bool]                             #[Bool] in case the simulation is launched trough an API. Option under development
        CreateFMU : [bool]                       #[Bool] True: creates FMU for each building specified in the BldID. No simulation is launched afterward. FMU will be found in the CaseName folder
        Calibration : [bool]                     #[Bool] if calibration process is desired to be launched (several other inputs are required
        CalibTimeBasis : [str]                   #[Str] can currently be either 'MonthlyBasis','WeeklyBasis','YearlyBasis'.
        MeasurePath4Calibration : [str]          #[Str] path to the measured data. File names currently need to quite specific. Under development for full deployment
        FromPosteriors : [bool]                  #[Bool] True : Outputs form already made calibration phase will be created. Under development for full deployment
        PosteriorsDataPath : [str]                 #[Str] path to the pickle file to be used to catch the posteriors
        ECMParam : [str]                           #[Str] Energy Conservation Measure. Currently done from available posteriors
        ECMChange : [float,int]                           #[Float] factor of enhancement of the default value (the default value could also be changed (useful for ECM applied to distributions)
        PassBldObject: [bool]                         #[Bool] key word for reading only once the geojson file. but no launch through consol then for each bld
        RefBuildNum: [int,str]                         #[Int] building number (order of the GeoJson file) taken as a reference to pick other within the RefPerimeter distance. useful for large DataSets
        RefPerimeter: [int]                      #[int] Distance threshold for which all building farer then this threshold for the RefBuildNum are ignored
        MakePolygonPlots : [bool]                #[Bool] Distance threshold for which all building farer then this threshold for the RefBuildNum are ignored
3_SIM :
    #files are needed to be located in the eather folder of EnergyPlus asthe same path is used afterward to launch the simulation
    1_WeatherData :
        WeatherDataFile : [str] #[Str] Need to be a epw file. This one is given because installed by default when installing EnergyPlus
        Latitude: [float,int]                  #[Float] Latitude of the location (+ is North, - is South) [-90,+90]
        Longitude: [float,int]                    #[Float] Longitude of the location (- is West, + is East [-180,180]
        Time_Zone: [float,int]                      #[Float] Time relative to GMT  [-12,14]
        Elevation: [float,int]                        #[Float] Elevation
        YearRoundGroundTemp : [float,int]               #Float] Year round ground temperature. considered constant afterward
    2_SimuData :
        Begin_Day_of_Month : [int]                  #[Int]
        Begin_Month : [int]                         #[Int]
        End_Day_of_Month : [int]                   #[Int]
        End_Month : [int]                          #[Int]
        SaveLogFiles : [bool]                    #[Bool] True: computing folder is not removed thus all energyplus outputs files are preserved
#this dict gives information on occupancy times each day. If DCV = True, the airflow will follow the number of person
    # and the schedule. if not it will be based only on the extra airflow rate but without schedule (all the time)
    #if some separation (ventilation and people) is needed than people heat generation should be converted inteo Electric Load as thus ariflow can be
    # related to a schedule, other wise...impossible
    3_BasisElement :
        Office_Open : [str]                   #[Str]
        Office_Close : [str]                  #[Str]
        DemandControlledVentilation : [bool]      #[Bool]
        OccupBasedFlowRate : [float,int]                  #[Float] l/s/person
        OccupHeatRate : [float,int]                      #[Float] W per person
        EnvLeak : [float,int]                             #[Float] l/s/m2 at 50Pa
        BasementAirLeak : [float,int]                     #[Float] in Air change rate [vol/hour]
        wwr : [float,int]                               #[Float]
        ExternalInsulation : [bool]              #[Bool]
        ElecYearlyLoad : [float,int]                     #[Float] this is the W\m2 value that will be applied constantly for appliances and occupancy consumptipon impact. It is replace by the values in EPCs if available
        IntLoadType : [str]                  #[Str] change either by 'Cste', 'winter', or 'summer' for reversed sigmoid or sigmoid this will generate hourly values file in the InputFiles folder
        IntLoadMultiplier : [float,int]                   #[Float] this is a multiplier the modeler would like to play with for calibration
        IntLoadCurveShape : [float,int]                   #[Float] this defines the slop of the curves
        OffOccRandom : [bool]                    #[Bool]
        AreaBasedFlowRate : [float,int]                #[Float] l/s/m2
        AreaBasedFlowRateDefault : [float,int]         #[Float] l/s/m2 This will not be changed by EPCs and is needed if EPCs report only the balcned ventilation flow with HR for building that have 2 system and one wihtout recovery.
        setTempUpL : [float,int]                    #[List of 2 Floats] only one have to be defined for none temperature modulation
        setTempLoL : [float,int]                    #[List of 2 Floats]#only one have to be defined for none temperature modulation
        ComfortTempOff : [str]                #[Str] hours at wich the first temperature set point is considered
        ComfortTempOn : [str]                 #[Str] hours at wich the second temperature set point is considered
        ACH_freecool : [float,int]                        #[Float] this the the vol/hr of extra ventilation when free cooling is on
        intT_freecool : [float,int]                      #[Float] internal temperature threshold for free coolong (opening windows with fixed ACH)
        dT_freeCool : [float,int]                         #[Float] Tint-Text to authorize free cooling to be turned on
        AirRecovEff : [float,int]                     #[Float] efficiency if heat is recovered from ventilation
        HVACLimitMode : [str]               #[Str] 'LimitCapacity', #can be NoLimit or LimitFlowRate or LimitFlowRateAndCpacity
        HVACPowLimit : [float,int]                       #[Float] in Watt/m2
   #Thisdict gives all the materials characteristics.
    # There are 2 layer maximum, the word Inertia and Insulation or key factor further in the code. If one layer is wanted, just comment the other one.
    #the basement is considered not heated and thus never insulated layer
    BaseMaterial :
        Window : 
            UFactor :  [float,int]                      #[Float]
            Solar_Heat_Gain_Coefficient : [float,int]   #[Float]
            Visible_Transmittance : [float,int]         #[Float]
        Wall Inertia :
            Thickness : [float,int]                     #[Float] #this layer will be considered also for the basement walls
            Conductivity : [float,int]                  #[Float]
            Roughness : [str]                 #[Str]
            Density : [float,int]                      #[Float]
            Specific_Heat : [float,int]                #[Float]
        Wall Insulation :
            Thickness : [float,int]                     #[Float]
            Conductivity : [float,int]                 #[Float]
            Roughness : [str]                 #[Str]
            Density : [float,int]                       #[Float]
            Specific_Heat : [float,int]                #[Float]
            #'Thermal_Absorptance' : [float,int]
        Basement Floor :
            Thickness : [float,int]                     #[Float] #this layer will be considered also for the basement floor
            Conductivity : [float,int]                  #[Float]
            Roughness : [str]                 #[Str]
            Density : [float,int]                      #[Float]
            Specific_Heat : [float,int]                #[Float]
    #   Basement Floor Insulation : 
    #       Thickness : [float,int]    #not needed as even without basement the Heated1rstFloor is taken for the first floor
    #       Conductivity : [float,int]
    #       Roughness : "Rough"
    #       Density : [float,int]
    #       Specific_Heat : [float,int]
    #   Roof Inertia :
    #        Thickness : [float,int] #not needed unless one wants to have inertia in the roof layer
    #        Conductivity : [float,int]
    #        Roughness : "Rough"
    #        Density : [float,int]
    #        Specific_Heat : [float,int]
        Roof Insulation :
            Thickness : [float,int]                     #[Float]
            Conductivity : [float,int]                 #[Float]
            Roughness : [str]                 #[Str]
            Density : [float,int]                       #[Float]
            Specific_Heat : [float,int]                #[Float]
           #Thermal_Absorptance : [float,int]
        Heated1rstFloor Inertia :
            Thickness : [float,int]                     #[Float]
            Conductivity : [float,int]                  #[Float]
            Roughness : [str]                 #[Str]
            Density : [float,int]                      #[Float]
            Specific_Heat : [float,int]                #[Float]
        Heated1rstFloor Insulation :
            Thickness : [float,int]                    #[Float]
            Conductivity : [float,int]                #[Float]
            Roughness : [str]                 #[Str]
            Density : [float,int]                       #[Float]
            Specific_Heat : [float,int]                #[Float]
           #Thermal_Absorptance : [float,int]

    #this dict is for specification of internalMass equivalence.
    #the material should represent the overall mean material of all partition and furnitures
    #the weight par zone area gives the quentity and the Average thickness enable to compute the surface for heat transfer
    #the mass gives a volume thanks to the density that gives a surface thanks to the average thickness
    InternalMass :
        HeatedZoneIntMass :
            Thickness : [float,int]                     #[Float] #m this will define the surface in contact with the zone
            Conductivity : [float,int]                  #[Float]
            Roughness : [str]                 #[Str]
            Density : [float,int]                       #[Float]
            Specific_Heat : [float,int]                #[Float]
            WeightperZoneArea : [float,int]              #[Float] #kg/m2
        NonHeatedZoneIntMass : 
            Thickness : [float,int]                     #[Float] #m this will define the surface in contact with the zone
            Conductivity : [float,int]                  #[Float]
            Roughness : [str]                 #[Str]
            Density : [float,int]                       #[Float]
            Specific_Heat : [float,int]                #[Float]
            WeightperZoneArea : [float,int]              #[Float] #kg/m2

    #this dict give element for the Domestic Hot water. it gives the externail file for the water taps and the inlet cold water temp.
    #if empty it is no longer taken into account. if new file are given, thses should be present in the Externael file folder
    ExtraEnergy :
        Present : [bool]                          #[Bool] True: will consider the following information. Currently only used for DHW
        Name : [str]                            #[Str]
        WatertapsFile : [str]  #[Str] path to external file #this file is in l/mnin and will be converted into m3/s afertward. it needs to have hourly values
        ColdWaterTempFile : [str] #[Str] path to external file
        HotWaterSetTemp : [float,int]                    #[Float]
        TargetWaterTapTemp : [float,int]                 #[Float]
        WaterTapsMultiplier : [float,int]         #[Float] eval() is ensured in the scriptsso operation van be given as well this is because the file given above is for 40 apartment and is in l/min where we need m3/s. in the code in is afterward multiplied by the number of apartement in the building
        
    #this dict is for the shading paradigm. There are two files that we need. the firt one is the main geojson that contains all buildings and their propreties
    #the other one contains for each shading surface id the vertex point and the building Id in order to catch the height of it.
    #to externalize as much as possible, these elements are reported in the dict below
    GeomElement :
        BuildIDKey : [str]   #[List of Str] key word that can be used for the building ID
        FormularIdKey : [str]            #[Str] key word for the the EPC correspondance
        ShadingIdKey : [str]                 #[Str] key word for the shadowing wall given in the geojson file only
        BuildingIdKey : [str]            #[Str] key word for the owner of the shadowing wall given in the geojson file only
        VertexKey : [str]                #[str] key for the attribute of the coordinates given in the geojson file only
        MaxShadingDist : [float,int]                    #[Float] Maximum distance allowed to consider shadowing walls
        DistanceTolerance : [float,int]                 #[Float] Geometric threshold from which below every edge are removed and vertexes merged
        VertexPrecision : [int]                   #[int] precision of the round function for vertex coordinates
        AltitudeTolerance : [float,int]                    #[float] Threshold below wich altitude will be merged

    
    # definition of person/m2...complytely abritrary, but we still need some vaalues
    # these proposales are taken from Marc Nohra report and from personnal suggestions
    # to be enhanced !!!!!BBR gives also some
    OccupType :
        Residential_key : [str]
        Residential_Rate : [float,int]
        Hotel_key : [str]
        Hotel_Rate : [float,int]
        Restaurant_key : [str]
        Restaurant_Rate : [float,int]
        Office_key : [str]
        Office_Rate : [float,int]
        FoodMarket_key : [str]
        FoodMarket_Rate : [float,int]
        GoodsMarket_key : [str]
        GoodsMarket_Rate : [float,int]
        Shopping_key : [str]
        Shopping_Rate : [float,int] #'I still wonder what is the difference with goods'
        Hospital24h_key : [str]
        Hospital24h_Rate : [float,int]
        Hospitalday_key : [str]
        Hospitalday_Rate : [float,int]
        School_key : [str]
        School_Rate : [float,int]
        IndoorSports_key : [str]
        IndoorSports_Rate : [float,int]
        Other_key : [str]
        Other_Rate : [float,int]
        AssembPlace_key : [str]
        AssembPlace_Rate : [float,int]
    #this dict deals with the ventilation systems
    VentSyst :
        BalX : [str]
        Exh : [str]
        Bal : [str]
        Nat : [str]
        ExhX : [str]
    #this dict defines the acceptable limits for the element precised as well as the swedish key for the DataBase
    DBLimits :
        surface_key : [str]
        surface_lim : [float,int]
        nbfloor_key : [str]
        nbfloor_lim :  [int]
        nbBasefloor_key : [str]
        nbBasefloor_lim :  [int]
        year_key : [str]
        year_lim :  [int]
        nbAppartments_key : [str]
        nbAppartments_lim : [int]
        height_key : [str]
        height_lim :       [float,int]
        AreaBasedFlowRate_key : [str]
        AreaBasedFlowRate_lim :     [float,int]
        nbStairwell_key : [str]
        nbStairwell_lim : [float,int]

    #this dict defines the EPC measured key word
    EPCMeters :
        Heating :
            OilHeating_key : [str]
            OilHeatingCOP : [float,int]
            GasHeating_key : [str]
            GasHeatingCOP : [float,int]
            WoodHeating_key : [str]
            WoodHeatingCOP : [float,int]
            PelletHeating_key : [str]
            PelletHeatingCOP : [float,int]
            BioFuelHeating_key : [str]
            BioFuelHeatingCOP : [float,int]
            ElecWHeating_key : [str]
            ElecWHeatingCOP : [float,int]
            ElecHeating_key : [str]
            ElecHeatingCOP : [float,int]
            GSHPHeating_key : [str]
            GSHPHeatingCOP : [float,int]
            EASHPHeating_key : [str]
            EASHPHeatingCOP : [float,int]
            AASHPHeating_key : [str]
            AASHPHeatingCOP : [float,int]
            DistrictHeating_key : [str]
            DistrictHeatingCOP : [float,int]
            ElecAirHeating_key : [str]
            ElecAirHeatingCOP : [float,int]
            AWSHPHeating_key : [str]
            AWSHPHeatingCOP : [float,int]
        
        DHW :
            OilHeating_key : [str]
            OilHeatingCOP : [float,int]
            GasHeating_key : [str]
            GasHeatingCOP : [float,int]
            WoodHeating_key : [str]
            WoodHeatingCOP : [float,int]
            PelletHeating_key : [str]
            PelletHeatingCOP : [float,int]
            BioFuelHeating_key : [str]
            BioFuelHeatingCOP : [float,int]
            ElecHeating_key : [str]
            ElecHeatingCOP : [float,int]
            DistrictHeating_key : [str]
            DistrictHeatingCOP : [float,int]
        Cooling :
            DistCooling_key : [str]
            DistCoolingCOP : [float,int]
            ElecCooling_key : [str]
            ElecCoolingCOP : [float,int]  #should be HP no?!

        ElecLoad :
            BuildingLev_key : [str]
            BuildingLevCOP : [float,int]
            HousholdLev_key : [str]
            HousholdLevCOP : [float,int]
            OperationLev_key : [str]
            OperationLevCOP : [float,int]

        NRJandClass :
            WeatherCorrectedNRJ_key : [str]
            WeatherCorrectedNRJCOP : [float,int]
            WeatherCorrectedPNRJ_key : [str]
            WeatherCorrectedPNRJCOP : [float,int]
            EnClasseVersion_key : [str]
            EnClasseVersionCOP : [float,int]
            NRJ_Class_key : [str]
            NRJ_ClassCOP : [float,int]